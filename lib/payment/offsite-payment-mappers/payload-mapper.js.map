{"version":3,"sources":["../../../src/payment/offsite-payment-mappers/payload-mapper.js"],"names":["PayloadMapper","addressMapper","AddressMapper","create","customerMapper","CustomerMapper","metaMapper","MetaMapper","paymentMethodIdMapper","PaymentMethodIdMapper","storeMapper","StoreMapper","data","authToken","order","payment","paymentMethod","payload","amount","grandTotal","integerAmount","bc_auth_token","cleanBigPayJWT","currency","gateway","mapToId","notify_url","callbackUrl","order_id","orderId","page_title","document","title","payment_method_id","id","reference_id","return_url","returnUrl","mapToBillingAddress","mapToCustomer","mapToMeta","mapToShippingAddress","mapToStore","formattedPayload","token","indexOf","substring"],"mappings":"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","file":"payload-mapper.js","sourcesContent":["import objectAssign from 'object-assign';\nimport { omitNil, toString } from '../../common/utils';\nimport AddressMapper from './address-mapper';\nimport CustomerMapper from './customer-mapper';\nimport MetaMapper from './meta-mapper';\nimport PaymentMethodIdMapper from '../payment-method-mappers/payment-method-id-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const addressMapper = AddressMapper.create();\n        const customerMapper = CustomerMapper.create();\n        const metaMapper = MetaMapper.create();\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper);\n    }\n\n    /**\n     * @param {AddressMapper} addressMapper\n     * @param {CustomerMapper} customerMapper\n     * @param {MetaMapper} metaMapper\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @param {StoreMapper} storeMapper\n     * @returns {Object}\n     */\n    constructor(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper) {\n        /**\n         * @private\n         * @type {AddressMapper}\n         */\n        this.addressMapper = addressMapper;\n\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {MetaMapper}\n         */\n        this.metaMapper = metaMapper;\n\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { authToken, order = {}, payment = {}, paymentMethod = {} } = data;\n\n        const payload = objectAssign(\n            {\n                amount: order.grandTotal ? order.grandTotal.integerAmount : null,\n                bc_auth_token: this.cleanBigPayJWT(authToken),\n                currency: order.currency,\n                gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n                notify_url: order.callbackUrl,\n                order_id: order.orderId ? toString(order.orderId) : null,\n                page_title: document.title ? document.title : null,\n                payment_method_id: paymentMethod.id,\n                reference_id: order.orderId ? toString(order.orderId) : null,\n                return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            },\n            this.addressMapper.mapToBillingAddress(data),\n            this.customerMapper.mapToCustomer(data),\n            this.metaMapper.mapToMeta(data),\n            this.addressMapper.mapToShippingAddress(data),\n            this.storeMapper.mapToStore(data)\n        );\n\n        const { formattedPayload = {} } = payment;\n\n        objectAssign(payload, formattedPayload);\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {string} token\n     * @return {string}\n     */\n    cleanBigPayJWT(token) {\n        if (token && token.indexOf(',') !== -1) {\n            return token.substring(0, token.indexOf(','));\n        }\n\n        return token;\n    }\n}\n"]}